{"version":3,"sources":["components/Colors/Colors.module.css","logo.svg","components/Colors/Colors.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Colors","props","useState","color","setColor","isHex","setIsHex","colorLabel","setColorLabel","textColor","setTextColor","useEffect","element","document","getElementById","bgColor","window","getComputedStyle","getPropertyValue","brightness","match","r","g","b","slice","replace","length","Math","sqrt","lightOrDark","console","log","className","styles","style","strColor","s","Option","toLowerCase","isColor","type","name","onChange","event","newColor","target","value","newIsHex","hexRegExp","test","setBackground","defaultProps","App","hexRegexp","RegExp","setBgColor","backgroundColor","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,OAAS,yB,mICDZ,I,4BCKTC,EAAS,SAACC,GACd,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAoCJ,mBAAS,wBAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAkCN,mBAAS,SAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAkDAC,qBAAU,WACR,GAAa,IAATR,EAAa,CACf,IAAIS,EAAUC,SAASC,eAAe,OAClCC,EAAUC,OACXC,iBAAiBL,EAAS,MAC1BM,iBAAiB,oBAChBC,EAtDY,SAACJ,GACnB,GAAIA,EAAQK,MAAM,QAIhB,IAAIC,GAHJN,EAAUA,EAAQK,MAChB,+DAEc,GACZE,EAAIP,EAAQ,GACZQ,EAAIR,EAAQ,QAKhBM,GAHAN,IACE,KAAOA,EAAQS,MAAM,GAAGC,QAAQV,EAAQW,OAAS,GAAK,KAAM,WAE/C,GACfJ,EAAKP,GAAW,EAAK,IACrBQ,EAAc,IAAVR,EAKN,OAFUY,KAAKC,KAAcP,EAAIA,EAAb,KAA2BC,EAAIA,EAAb,KAA2BC,EAAIA,EAAb,OAE7C,MACF,QAEF,OAgCYM,CAAYd,GAC7Be,QAAQC,IAAIhB,GAEVL,EADgB,QAAdS,EACW,QAEA,YAGhB,CAACZ,IAQJ,OACE,sBAAKyB,UAAWC,IAAOjC,OAAQ,cAAY,SAA3C,UACE,oBAAIgC,UAAU,aAAaE,MAAO,CAAE/B,MAAOM,GAA3C,SARY,SAAC0B,GACf,IAAIC,GAAI,IAAIC,QAASH,MAErB,OADAE,EAAEjC,MAAQgC,EACHC,EAAEjC,OAASgC,EAASG,cAMtBC,CAAQpC,IAAUE,EAAQE,EAAa,yBAE1C,uBACEiC,KAAK,OACLC,KAAK,QACLC,SArDc,SAACC,GACnB,IAAIC,EAAWD,EAAME,OAAOC,MACxBC,EAAW9C,EAAM+C,UAAUC,KAAKL,GACpCxC,EAASwC,GACO,IAAZA,GAEAtC,IADEyC,GAMJ9C,EAAMiD,cAAcN,GAGlBpC,EADEuC,EACY,IAAD,OAAKH,GAEJA,IAGhBpC,EAAc,yBAmCZsC,MAAO3C,QAQfH,EAAOmD,aAAe,GAEPnD,QC/EAoD,MAjBf,WACE,IAAMC,EAAY,IAAIC,OAAO,gCAC7B,EAA8BpD,mBAAS,MAAvC,mBAAOa,EAAP,KAAgBwC,EAAhB,KAQA,OACE,qBAAKrB,MAAO,CAAEsB,gBAAiBzC,GAAWiB,UAAU,MAAMyB,GAAG,MAA7D,SACE,cAAC,EAAD,CAAQP,cATU,SAAC/C,GACjBkD,EAAUJ,KAAK9C,GACjBoD,EAAW,IAAD,OAAKpD,IAEfoD,EAAWpD,IAK2B6C,UAAWK,OCJxCK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASC,eAAe,SAM1B4C,M","file":"static/js/main.79edef70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Colors\":\"Colors_Colors__m8T6z\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Colors.module.css\";\nimport { useState, useEffect } from \"react\";\n\nconst Colors = (props) => {\n  const [color, setColor] = useState(\"\");\n  const [isHex, setIsHex] = useState(false);\n  const [colorLabel, setColorLabel] = useState(\"Enter a valid color.\");\n  const [textColor, setTextColor] = useState(\"black\");\n\n  const lightOrDark = (bgColor) => {\n    if (bgColor.match(/^rgb/)) {\n      bgColor = bgColor.match(\n        /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/\n      );\n      var r = bgColor[1];\n      var g = bgColor[2];\n      var b = bgColor[3];\n    } else {\n      bgColor = +(\n        \"0x\" + bgColor.slice(1).replace(bgColor.length < 5 && /./g, \"$&$&\")\n      );\n      r = bgColor >> 16;\n      g = (bgColor >> 8) & 255;\n      b = bgColor & 255;\n    }\n\n    var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n\n    if (hsp >= 127.5) {\n      return \"light\";\n    }\n    return \"dark\";\n  };\n\n  const updateColor = (event) => {\n    var newColor = event.target.value;\n    var newIsHex = props.hexRegExp.test(newColor);\n    setColor(newColor);\n    if (newColor != \"\") {\n      if (newIsHex) {\n        setIsHex(true);\n      } else {\n        setIsHex(false);\n      }\n\n      props.setBackground(newColor);\n\n      if (newIsHex) {\n        setColorLabel(`#${newColor}`);\n      } else {\n        setColorLabel(newColor);\n      }\n    } else {\n      setColorLabel(\"Enter a valid color.\");\n    }\n  };\n\n  useEffect(() => {\n    if (color != \"\") {\n      var element = document.getElementById(\"App\");\n      var bgColor = window\n        .getComputedStyle(element, null)\n        .getPropertyValue(\"background-color\");\n      var brightness = lightOrDark(bgColor);\n      console.log(bgColor);\n      if (brightness == \"dark\") {\n        setTextColor(\"white\");\n      } else {\n        setTextColor(\"black\");\n      }\n    }\n  }, [colorLabel]);\n\n  const isColor = (strColor) => {\n    var s = new Option().style;\n    s.color = strColor;\n    return s.color == strColor.toLowerCase();\n  };\n\n  return (\n    <div className={styles.Colors} data-testid=\"Colors\">\n      <h1 className=\"ColorLabel\" style={{ color: textColor }}>\n        {isColor(color) || isHex ? colorLabel : \"Enter a valid color.\"}\n      </h1>\n      <input\n        type=\"text\"\n        name=\"color\"\n        onChange={updateColor}\n        value={color}\n      ></input>\n    </div>\n  );\n};\n\nColors.propTypes = {};\n\nColors.defaultProps = {};\n\nexport default Colors;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Colors from \"./components/Colors/Colors\";\nimport { useState } from \"react\";\nfunction App() {\n  const hexRegexp = new RegExp(/^([0-9a-f]{3}|[0-9a-f]{6})$/i);\n  const [bgColor, setBgColor] = useState(null);\n  const setBackground = (color) => {\n    if (hexRegexp.test(color)) {\n      setBgColor(`#${color}`);\n    } else {\n      setBgColor(color);\n    }\n  };\n  return (\n    <div style={{ backgroundColor: bgColor }} className=\"App\" id=\"App\">\n      <Colors setBackground={setBackground} hexRegExp={hexRegexp}></Colors>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}