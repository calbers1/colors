{"version":3,"sources":["components/Colors/Colors.module.css","logo.svg","components/Colors/Colors.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Colors","props","useState","randomizerInterval","setRandomizerInterval","color","setColor","colorLabel","setColorLabel","textColor","setTextColor","startRandomizer","setInterval","Randomizer","hexChars","i","Math","floor","random","toString","setBackground","changeFontColor","element","document","getElementById","brightness","bgColor","r","g","b","match","slice","replace","length","sqrt","bgDarkness","window","getComputedStyle","getPropertyValue","useEffect","isColor","strColor","s","Option","style","toLowerCase","className","styles","type","name","onChange","event","newColor","target","value","trim","IsHex","hexRegExp","test","clearInterval","borderColor","defaultProps","App","hexRegexp","RegExp","setBgColor","backgroundColor","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.822795c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Colors\":\"Colors_Colors__m8T6z\",\"colorLabel\":\"Colors_colorLabel__1MC1T\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Colors.module.css\";\nimport { useState, useEffect } from \"react\";\n\nconst Colors = (props) => {\n  const [randomizerInterval, setRandomizerInterval] = useState(\"\");\n  const [color, setColor] = useState(\"\");\n  const [colorLabel, setColorLabel] = useState(\"Enter a valid color.\");\n  const [textColor, setTextColor] = useState(\"black\");\n\n  //credit to https://awik.io/determine-color-bright-dark-using-javascript/ for hsp color space stuff\n  const bgDarkness = (bgColor) => {\n    var r, g, b;\n    //Splitting into R G B independant vars. if rgb:\n    if (bgColor.match(/^rgb/)) {\n      bgColor = bgColor.match(\n        /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/\n      );\n      r = bgColor[1];\n      g = bgColor[2];\n      b = bgColor[3];\n    } else {\n      //else it's hex\n      bgColor = +(\n        \"0x\" + bgColor.slice(1).replace(bgColor.length < 5 && /./g, \"$&$&\")\n      );\n      r = bgColor >> 16;\n      g = (bgColor >> 8) & 255;\n      b = bgColor & 255;\n    }\n    //this is the stuff I couldn't figure out myself...\n    var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n\n    if (hsp >= 127.5) {\n      return \"light\";\n    }\n    return \"dark\";\n  };\n\n  const updateColor = (event) => {\n    var newColor = event.target.value.trim();\n    var IsHex = props.hexRegExp.test(newColor);\n\n    setColor(newColor);\n\n    if (newColor !== \"\") {\n      props.setBackground(newColor);\n\n      if (newColor.toLowerCase() === \"random\") {\n        setColorLabel(\"Randomizing... Press space to stop on a color\");\n      } else if (IsHex) {\n        setColorLabel(`#${newColor}`);\n      } else if (isColor(newColor)) {\n        setColorLabel(newColor);\n      } else {\n        setColorLabel(\"Enter a valid color.\");\n      }\n    } else {\n      setColorLabel(\"Enter a valid color.\");\n    }\n\n    if (newColor.toLowerCase() === \"random\") {\n      startRandomizer();\n    } else if (randomizerInterval != null) {\n      clearInterval(randomizerInterval);\n    }\n  };\n\n  //start the party!\n  const startRandomizer = () => {\n    setRandomizerInterval(setInterval(Randomizer, 250));\n  };\n\n  //PARTY!\n  const Randomizer = () => {\n    var hexChars = \"\";\n\n    //load a string for a random hex color\n    for (var i = 0; i < 6; i++) {\n      hexChars = hexChars + Math.floor(Math.random() * 16).toString(16);\n    }\n    props.setBackground(hexChars);\n    setColor(hexChars);\n  };\n\n  //change the font color based on the background color/contrast\n  const changeFontColor = () => {\n    if (color !== \"\") {\n      var element = document.getElementById(\"App\");\n      var bgColor = window\n        .getComputedStyle(element, null)\n        .getPropertyValue(\"background-color\");\n      var brightness = bgDarkness(bgColor);\n      if (brightness === \"dark\") {\n        setTextColor(\"white\");\n      } else {\n        setTextColor(\"black\");\n      }\n    }\n  };\n\n  //using useEffect so that after the state vars get updated to the latest values, we can make sure that the text color is readable\n  useEffect(() => {\n    changeFontColor();\n  }, [\n    window\n      .getComputedStyle(document.getElementById(\"App\"), null)\n      .getPropertyValue(\"background-color\"),\n  ]);\n\n  //credit to Gennady G/dandavis on SO: https://stackoverflow.com/questions/48484767/javascript-check-if-string-is-valid-css-color\n  const isColor = (strColor) => {\n    var s = new Option().style;\n    s.color = strColor;\n    return s.color === strColor.toLowerCase();\n  };\n\n  return (\n    <div className={styles.Colors} data-testid=\"Colors\">\n      <h1\n        className=\"ColorLabel\"\n        style={{\n          color: textColor,\n        }}\n      >\n        {colorLabel}\n      </h1>\n      <input\n        type=\"text\"\n        name=\"color\"\n        onChange={updateColor}\n        style={{ color: textColor, borderColor: textColor }}\n        value={color.trim()}\n      ></input>\n    </div>\n  );\n};\n\nColors.propTypes = {};\n\nColors.defaultProps = {};\n\nexport default Colors;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Colors from \"./components/Colors/Colors\";\nimport { useState } from \"react\";\nfunction App() {\n  const hexRegexp = new RegExp(/^([0-9a-f]{3}|[0-9a-f]{6})$/i);\n  const [bgColor, setBgColor] = useState(null);\n  const setBackground = (color) => {\n    if (hexRegexp.test(color)) {\n      setBgColor(`#${color}`);\n    } else {\n      setBgColor(color);\n    }\n  };\n  return (\n    <div style={{ backgroundColor: bgColor }} className=\"App\" id=\"App\">\n      <Colors setBackground={setBackground} hexRegExp={hexRegexp}></Colors>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}